"""
Usage:
  get_feature_seq.py <sequences.fa.gz> <features.gtf.gz>

Options:
  -h --help     Show this screen.

"""
import pgrtk
import gzip
from docopt import docopt


"""
This simple script process the results generated by Immuanno, to get features to feed to GFE server.

Here is the script to generate the GTF fil woth immunannot

bash ../scripts/immuannot.sh -c HLA-ClassII_seq.fa.gz  -r refData-2023Jun05/ -o immuannot_MHC-c2.out -t 20
bash ../scripts/immuannot.sh -c KIR_HPRC.000.fa  -r refData-2023Jun05/ -o immuannot_KIR-HPRC.out -t 20
bash ../scripts/immuannot.sh -c assemble_results.fa.gz  -r refData-2023Jun05/ -o immuannot_KIR_asm.out -t 20

"""


if __name__ == "__main__":
    arguments = docopt(__doc__, version='get_feature_seq.py 0.0')

    sdb = pgrtk.SeqIndexDB()
    sdb.load_from_fastx(arguments['<sequences.fa.gz>'])
    sinfo = sdb.seq_info.copy()
    output_files = {}

    with gzip.open(arguments['<features.gtf.gz>'], mode="rt") as f:
        for row in f:
            
            if row[0] == "#":
                continue
            row = row.strip().split("\t")
            ctg_name = row[0]
            feature_name = row[2]
            start = int(row[3])
            end = int(row[4])
            strand = 0 if row[6] == '+' else 1
            annotations = [_.strip() for _ in row[8].split(";")]
            sub_seq = pgrtk.u8_to_string(sdb.get_sub_seq(arguments['<sequences.fa.gz>'], ctg_name, start-1, end))
            if strand == 1:
                sub_seq = pgrtk.rc(sub_seq)

            feature_start = start-1
            feature_end = end

            
            #print(ctg_name, feature_name, start, end, strand, sub_seq, annotations)


            gene_name = None
            for r in annotations:
                if r.startswith("gene_name"):
                    gene_name = r

            if gene_name is not None:
                gene_name = gene_name.split()[1].strip('"')
                out_filename= gene_name+"_features.fa"
                if out_filename not in output_files:
                    output_files[out_filename] = open(out_filename, "w")
                out_file = output_files[out_filename]
                print(f">{gene_name}::{feature_name}::{ctg_name}::{feature_start}-{feature_end}", file = out_file)
                print(sub_seq, file = out_file)


                # print(ctg_name, feature_name, start, end, strand, sub_seq, gene_name, annotations)

    for _, f in output_files.items():
        f.close()


